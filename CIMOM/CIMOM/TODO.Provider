		**********************
		 way necessary ToDo's
		**********************

- The very important Intrinsic Methods "CreateInstance" and
  "DeleteInstance" are currently not implemented in the PaulA provider
  concept. Instead of this we temporarily have a workaround with the CIM
  class PaulA_Instance and several Extrinsic Methods in it.

- The handling of comments currently is *very* simple andtheerfore
  buggy: It cuts everything from a specified comment character to the
  end of the line. No quotes comment characters or such in strings are
  supported.

- Not (well tested) error handling when one of teh OUT handles fails.

- For administrating a Linux system via a client/frontend you need a
  good permission handling concept. We've only implemented a very early
  stadium of this, namely the CIM class "PaulA_Group" with the property
  "Permissions". But not PaulA but the frontend currently does the
  permission handling.

- Way better %info hash concept.


		********************
		  some more ToDo's
		********************

- Probably a lot of documentation is out of date or not existent.

- Better parameter checking on Extrinsic Methods.

- The "use"/"do" concept in the provider files currently is a little bit
  buggy.

- Our WebFrontend package segfaults sporadicly. Maybe it has something
  to do with a "GetClass" request.

- Each property can be read completely from one handle. Sometimes you
  have more than one file to collect all needed stuff to get the value
  of the property (appart from calling extrinsic methods).
  This has nothing to do with multiple IN handles: Each IN handle reads
  a complete property value - this is useful for comparing them.

- Leeds in the same direction: Support of an unknown number of handles.
  Example: A config file can support #include's...

- Sourcing out redundant information in the XML provider files.

- OUT COMMAND handles can't handle STDIN. Currently they only support
  command line options.

- HANDLEs must have a unique numbering. Don't know what happens if there
  are double or missing ordering numbers.

- Better support of "readonly" properties.  (-> ERR_NOT_SUPPORTED)

- Better t-test support (some of them are quite uncomfortable).

- The %info concept in the provider sometimes leads to a lot of empty
  lines in the config files the more you modify them.
  
- Identify a SECTION dynamically (not static with a RegExp in the XML
  provider file).

- Support of "looking in comments". Otherwise sometimes you have
  problems in defining a SECTION. Example may be a shell script with a
  couple of commands in it and you want to maintain these lines.
  Interesting may be the provider functionality "commenting in/out".

- Support of multiple verbose levels in the CIMOM.


















-----------------------------------------------------------------------------

Following an old but ,ore extensive Provider ToDo list.
Sorry, it's for the author's (=Volkers) convenience in german language.

- Properties aus mehr als einem Handle verteilt lesen koennen.
  Idee: Statt Scalar/Array kann man auch beliebige andere Infos einlesen
  (pro Handle auch gerne verschiedene), die man dann in
  compareReadValues() [->anderer Name!] dann per Funktionsaufruf
  zusammensetzt und erst dann checkt.

- DEFAULT-Wert in XML-Datei fuer Arrays. Evtl. wie beim
  <VALUE.ARRAY><VALUE>... machen und damit DEFAULT statt Attribut jetzt
  Child.
  Oder vielleicht statt mit DEFAULT jetzt DEFAULT.ARRAY="['...', '...']
  wie in Perl.
  Nicht nur bei DEFAULT, sondern auch evtl. bei VALUE.

- SetProperty soll auch mit STDIN bei COMMAND-Handles umgehen koennen.

- Werden Properties angefragt, die kein Handle bekommen, muss noch
  MightBeNull abgefragt werden. Auch irgendwie bei anderen Properties...

- doppelte Eintraege in der PropertyList muessen ignoriert werden

- Read-Only-Properties unterstuetzen
  (d.h. ein Flag im XML, der dann einen ERR_NOT_SUPPORTED zur Folge hat,
  wenn man die Property trotzdem setzen will.)
  Ist zwar (vermutlich) nur zum Entwickeln gut, aber besser, als das was
  unvorhergesehes passiert.

- Dynamisch viele Handles pro Property:
  Z.B. kann /etc/postfix/aliases ein "#include" haben: Der Inhalt der
  angegebenen Datei muss dann auch beachtet werden. Ist beim Lesen nicht
  unbedingt das Problem, aber beim Schreiben. Zum Lesen vielleicht eine
  Function readhandle_*() unterstuetzen, die die #include's aufloest.

- Betrifft die t-Tests:
  * Bei GetProperty() is bei einem 'boolean' evtl. nicht ganz klar, ob
    FALSE/TRUE oder 0/1... (Typ wird im XML ja nicht uebermittelt)
  * Besseres Konzept, was die Instanzen-Tests angeht

- PaulA-Gruppen: Was soll passieren, wenn falsche Gruppe angegeben?
  Momentan wid sie ignoriert...

- Beim Aendern von System-Dateien kommen oft immer mehr Leerzeilen rein.
  Liegt am %info-Mechanismus. Mal ueberlegen, was man dagegen machen
  kann.

- Dynamisch eine Section erkennen (dhcp.conf)

- Bei COMMAND-Handles ein Flag, dass es nur einmal (und nicht fuer alle
  in Frage kommenden Properties) aufgerufen wird.

- Probleme beim Section-Mapping in der httpd.conf. Stichwort "ServerName".
  Der kann alleine stehen oder in <...>...</...>. Ich will aber nur die
  alleinestehende Version haben.

- Kommentare koennen auch nur am Zeilenanfang stehen: httpd.conf/crontab

- Parameter-Checking bei den ExtrinsicMethods

- Teile der XML-Dateien auslagern, um Arbeit beim Entwickeln einzusparen.
  Hatten Axel und ich auch mal probiert, ging aber nicht. Schien mit dem
  Apache zusammenzuhaengen, denn exakt der selbe Code in einem
  Perl-Script klappte.

- das "do .../common/..." wieder in einn "use" umwandeln, und notfalls
  verschiedene .pm's aus einem machen.
  Problem sind gleiche Funktionsnamen, wenn das gleiche .pm von unter-
  schiedlichen Klassen (z.B. PaulA_User und PaulA_MTA bei den Mail-
  sachen) ge-do-t wird.

- Falls in einem common/xy.pm ein falsches "use" gemacht wird, dann
  gibt's keine Warnung oder Fehlermeldung. Doof, weil man sonst nicht
  den Fehler findet.

- Unterstuetzung mehrerer verbose-Levels zum besseren Debuggen

- Falls es bei boolean-Properties mit mehr als einem IN-Handle einen
  Konflikt gibt, könnte man einen Mechanismus gebrauchen, der dann
  wieder einen einheitlichen Zustand herstellt, z.B. alles auf False
  setzt.

- Besonders beim Firewall-Script vom Baublys wird deutlich, dass wir
  wohl doch ein search-in-coments brauchen. In dem Script muessen die
  Kommandos in einer bestimmten Reihenfolge aufgerufen werden, sogesehen
  kann man da nicht gescheit Sections definieren. Eventuell kann man
  auch eine Ein-und-Auskommentier-Funktion gebrauchen.
  Idee was den ersten Teil angeht: neben _nocomments auch ein _comments
  einfuehren, und das search() so erweitern, dass es erst darin die
  Positionen findet und dann einen zu _nocomments/_complete passenden
  %info-Hash zurueckliefert.

